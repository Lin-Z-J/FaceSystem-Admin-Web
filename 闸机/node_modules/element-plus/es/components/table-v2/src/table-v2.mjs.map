{"version":3,"file":"table-v2.mjs","sources":["../../../../../../packages/components/table-v2/src/table-v2.tsx"],"sourcesContent":["import { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell']}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n"],"names":["Overlay","COMPONENT_NAME","TableV2","defineComponent","name","props","slots","expose","columnsStyles","fixedColumnsOnLeft","fixedColumnsOnRight","mainColumns","mainTableHeight","fixedTableHeight","leftTableWidth","rightTableWidth","data","depthMap","expandedRowKeys","hasFixedColumns","hoveringRowKey","mainTableRef","leftTableRef","rightTableRef","isDynamic","isResetting","isScrolling","bodyWidth","emptyStyle","rootStyle","headerWidth","footerHeight","showEmpty","scrollTo","scrollToLeft","scrollToTop","scrollToRow","getRowHeight","onColumnSorted","onRowHeightChange","onRowsRendered","onScroll","onVerticalScroll","useTable","cache","cellProps","estimatedRowHeight","expandColumnKey","fixedData","headerHeight","headerClass","headerProps","headerCellProps","sortBy","sortState","rowHeight","rowClass","rowEventHandlers","rowKey","rowProps","scrollbarAlwaysOn","indentSize","iconSize","useIsScrolling","vScrollbarSize","width","_data","class","columns","unref","height","scrollbarStartGap","scrollbarEndGap","_fixedTableHeight","style","_createVNode","Row","_mergeProps","Cell","tableCellProps","Header","HeaderCell","ns","tableHeaderProps","_columnsStyles","row","cell","RightTable","Empty","header","column","key"],"mappings":"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"}